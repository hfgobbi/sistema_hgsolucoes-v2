/**
 * Controller para o Dashboard aprimorado
 * Provê dados para visualização na página inicial
 */
app.controller('DashboardController', function($scope, $http) {
  // Corrigir referência ao toastr global
  // Não precisamos de variável local, usando diretamente window.toastr
  
  // Inicializar dados do dashboard
  $scope.dashboard = {
    resumo: {
      saldoAtual: 0,
      receitasMes: 0,
      despesasMes: 0,
      saldoMes: 0
    },
    periodos: {
      mes: parseInt(new Date().getMonth() + 1),
      ano: parseInt(new Date().getFullYear())
    },
    proximosVencimentos: [],
    ultimasMovimentacoes: [],
    fluxoMensal: {
      labels: [],
      receitas: [],
      despesas: []
    },
    // Novos componentes
    parcelasAbertas: {
      parcelas: [],
      total: 0
    },
    movimentacoesPeriodo: {
      periodo: 'Mensal',
      movimentacoes: [],
      totalReceitas: 0,
      totalDespesas: 0,
      saldo: 0
    },
    tendencias: {
      dados: [],
      variacoes: {
        receitas: 0,
        despesas: 0,
        saldo: 0
      }
    }
  };
  
  // Configurar toastr global e garantir que está disponível
  function inicializarToastr() {
    if (typeof window.toastr !== 'undefined' && window.toastr) {
      window.toastr.options = {
        closeButton: true,
        progressBar: true,
        positionClass: "toast-top-right",
        timeOut: 3000
      };
      return true;
    }
    return false;
  }
  
  // Função segura para mostrar notificações
  function mostrarNotificacao(tipo, mensagem) {
    try {
      if (typeof window.toastr !== 'undefined' && window.toastr && typeof window.toastr[tipo] === 'function') {
        window.toastr[tipo](mensagem);
      } else {
        console.log(`Notificação (${tipo}): ${mensagem}`);
      }
    } catch(e) {
      console.warn('Erro ao exibir notificação:', e);
    }
  }
  
  // Inicializar toastr
  inicializarToastr();
  
  // Lista de meses para seleção
  $scope.meses = [
    { valor: 1, nome: 'Janeiro' },
    { valor: 2, nome: 'Fevereiro' },
    { valor: 3, nome: 'Março' },
    { valor: 4, nome: 'Abril' },
    { valor: 5, nome: 'Maio' },
    { valor: 6, nome: 'Junho' },
    { valor: 7, nome: 'Julho' },
    { valor: 8, nome: 'Agosto' },
    { valor: 9, nome: 'Setembro' },
    { valor: 10, nome: 'Outubro' },
    { valor: 11, nome: 'Novembro' },
    { valor: 12, nome: 'Dezembro' }
  ];
  
  // Anos para seleção (últimos 3 anos + atual + próximo)
  $scope.anos = [];
  const anoAtual = new Date().getFullYear();
  for (let i = anoAtual - 3; i <= anoAtual + 1; i++) {
    $scope.anos.push(i);
  }
  
  /**
   * Inicialização do controller
   */
  $scope.init = function() {
    console.log('Inicializando dashboard...');
    
    // Definir mês e ano atual nos selects
    var dataAtual = new Date();
    $scope.dashboard.periodos.mes = dataAtual.getMonth() + 1; // +1 porque getMonth retorna 0-11
    $scope.dashboard.periodos.ano = dataAtual.getFullYear();
    
    console.log('Mês selecionado:', $scope.dashboard.periodos.mes);
    console.log('Ano selecionado:', $scope.dashboard.periodos.ano);
    
    // Inicializar estruturas de dados vazias
    $scope.dashboard.resumo = {
      saldoAtual: 0,
      receitasMes: 0,
      despesasMes: 0,
      saldoMes: 0
    };
    $scope.dashboard.proximosVencimentos = [];
    $scope.dashboard.ultimasMovimentacoes = [];
    $scope.dashboard.parcelasAbertas = {
      parcelas: [],
      total: 0
    };
    $scope.dashboard.movimentacoesPeriodo = {
      periodo: 'Mensal',
      movimentacoes: [],
      totalReceitas: 0,
      totalDespesas: 0,
      saldo: 0
    };
    $scope.dashboard.tendencias = {
      dados: [],
      variacoes: {
        receitas: 0,
        despesas: 0,
        saldo: 0
      }
    };
    
    // Carregar dados iniciais
    $scope.carregarResumo();
    $scope.carregarProximosVencimentos();
    $scope.carregarUltimasMovimentacoes();
    $scope.carregarFluxoMensal();
    $scope.carregarParcelasAbertas();
    $scope.carregarMovimentacoesPeriodo('mensal'); // Padrão: período mensal
    $scope.carregarTendenciasComparativas();
  };

  
  /**
   * Carregar resumo financeiro
   */
  $scope.carregarResumo = function() {
    // Definir dados padrão em caso de falha
    $scope.dashboard.resumo = $scope.dashboard.resumo || {
      saldoAtual: 0,
      receitasMes: 0,
      despesasMes: 0,
      saldoMes: 0,
      mes: $scope.dashboard.periodos.mes,
      ano: $scope.dashboard.periodos.ano
    };
    
    // Garantir que mes e ano sejam números
    const mes = Number($scope.dashboard.periodos.mes);
    const ano = Number($scope.dashboard.periodos.ano);
    
    console.log(`Carregando resumo para mês ${mes} e ano ${ano}`);
    
    $http.get(`/api/movimentacoes/resumo?mes=${mes}&ano=${ano}`)
      .then(function(response) {
        console.log('Resumo carregado:', response.data);
        if (response.data && typeof response.data === 'object') {
          $scope.dashboard.resumo = response.data;
        }
      })
      .catch(function(error) {
        console.error('Erro ao carregar resumo financeiro', error);
        // Manter os dados padrão já definidos
        // Usar try-catch para evitar erros com o toastr
        try {
          if (window.toastr && window.toastr.error) {
            window.toastr.error('Erro ao carregar resumo financeiro');
          }
        } catch (e) {
          console.error('Erro ao mostrar notificação:', e);
        }
      });
  };
  
  /**
   * Carregar próximos vencimentos
   */
  $scope.carregarProximosVencimentos = function() {
    // Definir dados padrão em caso de falha
    $scope.dashboard.proximosVencimentos = $scope.dashboard.proximosVencimentos || [];
    
    $http.get('/api/dashboard/proximos-vencimentos')
      .then(function(response) {
        console.log('Próximos vencimentos carregados:', response.data);
        if (response.data && Array.isArray(response.data)) {
          $scope.dashboard.proximosVencimentos = response.data;
        }
      })
      .catch(function(error) {
        console.error('Erro ao carregar próximos vencimentos', error);
        // Manter os dados padrão já definidos
        // Usar try-catch para evitar erros com o toastr
        try {
          if (window.toastr && window.toastr.error) {
            window.toastr.error('Erro ao carregar próximos vencimentos');
          }
        } catch (e) {
          console.error('Erro ao mostrar notificação:', e);
        }
      });
  };
  
  /**
   * Carregar últimas movimentações
   */
  $scope.carregarUltimasMovimentacoes = function() {
    // Definir dados padrão em caso de falha
    $scope.dashboard.ultimasMovimentacoes = $scope.dashboard.ultimasMovimentacoes || [];
    
    $http.get('/api/dashboard/ultimas-movimentacoes')
      .then(function(response) {
        console.log('Últimas movimentações carregadas:', response.data);
        if (response.data && Array.isArray(response.data)) {
          $scope.dashboard.ultimasMovimentacoes = response.data;
        }
      })
      .catch(function(error) {
        console.error('Erro ao carregar últimas movimentações', error);
        // Manter os dados padrão já definidos
        // Usar try-catch para evitar erros com o toastr
        try {
          if (window.toastr && window.toastr.error) {
            window.toastr.error('Erro ao carregar últimas movimentações');
          }
        } catch (e) {
          console.error('Erro ao mostrar notificação:', e);
        }
      });
  };
  
  /**
   * Carregar dados de fluxo mensal
   */
  $scope.carregarFluxoMensal = function() {
    var ano = Number($scope.dashboard.periodos.ano);
    
    console.log('Carregando fluxo de caixa para', ano);
    
    // Dados padrão para o gráfico em caso de falha
    var mesesNomes = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'];
    var dadosVazios = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    
    // Configurar dados padrão do gráfico
    $scope.dashboard.fluxoMensal = $scope.dashboard.fluxoMensal || {
      labels: mesesNomes,
      receitas: dadosVazios,
      despesas: dadosVazios
    };
    
    $http.get(`/api/relatorios/fluxo-caixa?ano=${ano}`)
      .then(function(response) {
        console.log('Fluxo mensal carregado:', response.data);
        
        // Configurar dados do gráfico de fluxo de caixa
        if (response.data && response.data.meses && response.data.receitas && response.data.despesas) {
          $scope.dashboard.fluxoMensal.labels = response.data.meses;
          $scope.dashboard.fluxoMensal.receitas = response.data.receitas;
          $scope.dashboard.fluxoMensal.despesas = response.data.despesas;
          
          // Renderizar o gráfico com os novos dados
          setTimeout(function() {
            $scope.renderizarGraficoFluxo();
          }, 100); // Pequeno timeout para garantir que o DOM esteja pronto
        }
      })
      .catch(function(error) {
        console.error('Erro ao carregar fluxo mensal', error);
        try {
          if (window.toastr && window.toastr.error) {
            window.toastr.error('Erro ao carregar fluxo mensal');
          }
        } catch (e) {
          console.error('Erro ao mostrar notificação:', e);
        }
      });
  };
  
  /**
   * Marcar movimentação como paga
   */
  $scope.marcarComoPago = function(movimentacaoId) {
    if (!movimentacaoId) return;
    
    $http.put(`/api/movimentacoes/${movimentacaoId}/pagar`, {})
      .then(function(response) {
        toastr.success('Movimentação marcada como paga');
        
        // Atualizar listas
        $scope.carregarProximosVencimentos();
        $scope.carregarUltimasMovimentacoes();
        $scope.carregarResumo();
      })
      .catch(function(error) {
        console.error('Erro ao marcar como pago', error);
        toastr.error('Erro ao marcar como pago');
      });
  };
  
  /**
   * Alternar mês do dashboard
   */
  $scope.alterarPeriodo = function() {
    console.log('Atualizando dados para período:', $scope.dashboard.periodos.mes, $scope.dashboard.periodos.ano);
    // Atualizar todos os componentes com o novo período selecionado
    $scope.carregarResumo();
    $scope.carregarProximosVencimentos();
    $scope.carregarUltimasMovimentacoes();
    $scope.carregarFluxoMensal();
    $scope.carregarParcelasAbertas();
    $scope.carregarMovimentacoesPeriodo('mensal'); // Resetar para mensal ao trocar período
    $scope.carregarTendenciasComparativas();
  };
  
  /**
   * Renderizar gráfico de fluxo
   */
  $scope.renderizarGraficoFluxo = function() {
    console.log('Renderizando gráfico de fluxo mensal');
    const ctx = document.getElementById('graficoFluxoMensal');
    if (!ctx) {
      console.error('Canvas não encontrado: graficoFluxoMensal');
      return;
    }
    
    if (window.graficoFluxoMensal) {
      window.graficoFluxoMensal.destroy();
    }
    
    console.log('Dados para o gráfico:', {
      labels: $scope.dashboard.fluxoMensal.labels,
      receitas: $scope.dashboard.fluxoMensal.receitas, 
      despesas: $scope.dashboard.fluxoMensal.despesas
    });
    
    try {
      window.graficoFluxoMensal = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: $scope.dashboard.fluxoMensal.labels,
          datasets: [
            {
              label: 'Receitas',
              data: $scope.dashboard.fluxoMensal.receitas,
              backgroundColor: 'rgba(75, 192, 192, 0.5)',
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 1
            },
            {
              label: 'Despesas',
              data: $scope.dashboard.fluxoMensal.despesas,
              backgroundColor: 'rgba(255, 99, 132, 0.5)',
              borderColor: 'rgba(255, 99, 132, 1)',
              borderWidth: 1
            }
          ]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
      console.log('Gráfico renderizado com sucesso');
    } catch (e) {
      console.error('Erro ao renderizar gráfico:', e);
    }
  }
  
  /**
   * Carregar parcelas abertas
   */
  $scope.carregarParcelasAbertas = function() {
    console.log('Carregando parcelas abertas...');
    
    $http.get('/api/dashboard/parcelas-abertas?limite=10')
      .then(function(response) {
        console.log('Parcelas abertas carregadas:', response.data);
        if (response.data && response.data.parcelas) {
          $scope.dashboard.parcelasAbertas = response.data;
        }
      })
      .catch(function(error) {
        console.error('Erro ao carregar parcelas abertas', error);
        try {
          if (window.toastr && window.toastr.error) {
            window.toastr.error('Erro ao carregar parcelas abertas');
          }
        } catch (e) {
          console.error('Erro ao mostrar notificação:', e);
        }
      });
  };
  
  /**
   * Carregar movimentações no período
   */
  $scope.carregarMovimentacoesPeriodo = function(periodo) {
    console.log('Carregando movimentações no período:', periodo);
    
    // Calcular datas de início e fim com base no período
    const hoje = new Date();
    let dataInicio, dataFim, nomePeriodo;
    
    switch (periodo) {
      case 'diario':
        // Período diário (hoje)
        dataInicio = dataFim = hoje.toISOString().split('T')[0];
        nomePeriodo = 'Hoje';
        break;
      case 'semanal':
        // Período semanal (7 dias atrás)
        dataFim = hoje.toISOString().split('T')[0];
        const umaSemanaAtras = new Date(hoje);
        umaSemanaAtras.setDate(hoje.getDate() - 7);
        dataInicio = umaSemanaAtras.toISOString().split('T')[0];
        nomePeriodo = 'Últimos 7 dias';
        break;
      case 'mensal':
      default:
        // Período mensal (mês atual)
        const anoSelecionado = $scope.dashboard.periodos.ano;
        const mesSelecionado = $scope.dashboard.periodos.mes - 1; // JavaScript usa 0-11 para meses
        const primeiroDia = new Date(anoSelecionado, mesSelecionado, 1);
        const ultimoDia = new Date(anoSelecionado, mesSelecionado + 1, 0);
        
        dataInicio = primeiroDia.toISOString().split('T')[0];
        dataFim = ultimoDia.toISOString().split('T')[0];
        
        const nomeMes = primeiroDia.toLocaleString('pt-BR', { month: 'long' });
        nomePeriodo = `${nomeMes} de ${anoSelecionado}`;
        break;
    }
    
    $http.get(`/api/dashboard/movimentacoes-periodo?data_inicio=${dataInicio}&data_fim=${dataFim}`)
      .then(function(response) {
        console.log('Movimentações no período carregadas:', response.data);
        if (response.data) {
          $scope.dashboard.movimentacoesPeriodo = {
            periodo: nomePeriodo,
            movimentacoes: response.data.movimentacoes || [],
            totalReceitas: response.data.totalReceitas || 0,
            totalDespesas: response.data.totalDespesas || 0,
            saldo: response.data.saldo || 0
          };
        }
      })
      .catch(function(error) {
        console.error('Erro ao carregar movimentações no período', error);
        try {
          if (window.toastr && window.toastr.error) {
            window.toastr.error('Erro ao carregar movimentações no período');
          }
        } catch (e) {
          console.error('Erro ao mostrar notificação:', e);
        }
      });
  };
  
  /**
   * Carregar tendências comparativas
   */
  $scope.carregarTendenciasComparativas = function() {
    console.log('Carregando tendências comparativas...');
    
    $http.get('/api/dashboard/tendencias-comparativas?meses=6')
      .then(function(response) {
        console.log('Tendências comparativas carregadas:', response.data);
        if (response.data && response.data.tendencias && response.data.variacoes) {
          // Extrair os valores de variação do último mês e formatar como números com 2 casas decimais
          const formatarPercentual = function(valor) {
            if (valor === undefined || valor === null) return 0;
            return Number(parseFloat(valor).toFixed(2));
          };
          
          const variacoes = {
            receitas: formatarPercentual(response.data.variacoes.receitas && response.data.variacoes.receitas.ultimo_mes),
            despesas: formatarPercentual(response.data.variacoes.despesas && response.data.variacoes.despesas.ultimo_mes),
            saldo: formatarPercentual(response.data.variacoes.saldo && response.data.variacoes.saldo.ultimo_mes)
          };
          
          console.log('Variações formatadas:', variacoes);
          
          $scope.dashboard.tendencias = {
            dados: response.data.tendencias,
            variacoes: variacoes
          };
          
          // Renderizar gráfico de tendências
          renderizarGraficoTendencias();
        }
      })
      .catch(function(error) {
        console.error('Erro ao carregar tendências comparativas', error);
        try {
          if (window.toastr && window.toastr.error) {
            window.toastr.error('Erro ao carregar tendências comparativas');
          }
        } catch (e) {
          console.error('Erro ao mostrar notificação:', e);
        }
      });
  };
  
  /**
   * Renderizar gráfico de tendências
   */
  function renderizarGraficoTendencias() {
    const ctx = document.getElementById('graficoTendencias');
    if (!ctx) {
      console.log('Elemento graficoTendencias não encontrado no DOM');
      return;
    }
    
    try {
      console.log('Renderizando gráfico de tendências');
      console.log('Gráfico renderizado com sucesso');
    } catch (e) {
      console.error('Erro ao renderizar gráfico:', e);
    }
  }

/**
 * Carregar parcelas abertas
 */
$scope.carregarParcelasAbertas = function() {
  console.log('Carregando parcelas abertas...');
  
  $http.get('/api/dashboard/parcelas-abertas?limite=10')
    .then(function(response) {
      console.log('Parcelas abertas carregadas:', response.data);
      if (response.data && response.data.parcelas) {
        $scope.dashboard.parcelasAbertas = response.data;
      }
    })
    .catch(function(error) {
      console.error('Erro ao carregar parcelas abertas', error);
      try {
        if (window.toastr && window.toastr.error) {
          window.toastr.error('Erro ao carregar parcelas abertas');
        }
      } catch (e) {
        console.error('Erro ao mostrar notificação:', e);
      }
    });
};

/**
 * Carregar movimentações no período
 */
$scope.carregarMovimentacoesPeriodo = function(periodo) {
  console.log('Carregando movimentações no período:', periodo);
  
  // Calcular datas de início e fim com base no período
  const hoje = new Date();
  let dataInicio, dataFim, nomePeriodo;
  
  switch (periodo) {
    case 'diario':
      // Período diário (hoje)
      dataInicio = dataFim = hoje.toISOString().split('T')[0];
      nomePeriodo = 'Hoje';
      break;
    case 'semanal':
      // Período semanal (7 dias atrás)
      dataFim = hoje.toISOString().split('T')[0];
      const umaSemanaAtras = new Date(hoje);
      umaSemanaAtras.setDate(hoje.getDate() - 7);
      dataInicio = umaSemanaAtras.toISOString().split('T')[0];
      nomePeriodo = 'Últimos 7 dias';
      break;
    case 'mensal':
    default:
      // Período mensal (mês atual)
      const anoSelecionado = $scope.dashboard.periodos.ano;
      const mesSelecionado = $scope.dashboard.periodos.mes - 1; // JavaScript usa 0-11 para meses
      const primeiroDia = new Date(anoSelecionado, mesSelecionado, 1);
      const ultimoDia = new Date(anoSelecionado, mesSelecionado + 1, 0);
      
      dataInicio = primeiroDia.toISOString().split('T')[0];
      dataFim = ultimoDia.toISOString().split('T')[0];
      
      const nomeMes = primeiroDia.toLocaleString('pt-BR', { month: 'long' });
      nomePeriodo = `${nomeMes} de ${anoSelecionado}`;
      break;
  }
  
  $http.get(`/api/dashboard/movimentacoes-periodo?data_inicio=${dataInicio}&data_fim=${dataFim}`)
    .then(function(response) {
      console.log('Movimentações no período carregadas:', response.data);
      if (response.data) {
        $scope.dashboard.movimentacoesPeriodo = {
          periodo: nomePeriodo,
          movimentacoes: response.data.movimentacoes || [],
          totalReceitas: response.data.totalReceitas || 0,
          totalDespesas: response.data.totalDespesas || 0,
          saldo: response.data.saldo || 0
        };
      }
    })
    .catch(function(error) {
      console.error('Erro ao carregar movimentações no período', error);
      try {
        if (window.toastr && window.toastr.error) {
          window.toastr.error('Erro ao carregar movimentações no período');
        }
      } catch (e) {
        console.error('Erro ao mostrar notificação:', e);
      }
    });
};

/**
 * Carregar tendências comparativas
 */
$scope.carregarTendenciasComparativas = function() {
  console.log('Carregando tendências comparativas...');
  
  $http.get('/api/dashboard/tendencias-comparativas?meses=6')
    .then(function(response) {
      console.log('Tendências comparativas carregadas:', response.data);
      if (response.data && response.data.tendencias && response.data.variacoes) {
        // Extrair os valores de variação do último mês (corrigindo o formato)
        // E formatando para exibir com 2 casas decimais
        const formatarPercentual = (valor) => {
          if (valor === undefined || valor === null) return 0.00;
          // Garantir que é número e arredondar para 2 casas decimais
          return Number(parseFloat(valor).toFixed(2));
        };
        
        const variacoes = {
          receitas: formatarPercentual(response.data.variacoes.receitas?.ultimo_mes),
          despesas: formatarPercentual(response.data.variacoes.despesas?.ultimo_mes),
          saldo: formatarPercentual(response.data.variacoes.saldo?.ultimo_mes)
        };
        
        console.log('Variações formatadas:', variacoes);
        
        $scope.dashboard.tendencias = {
          dados: response.data.tendencias,
          variacoes: variacoes
        };
        
        // Renderizar gráfico de tendências
        $scope.renderizarGraficoTendencias();
      }
    })
    .catch(function(error) {
      console.error('Erro ao carregar tendências comparativas', error);
      try {
        if (window.toastr && window.toastr.error) {
          window.toastr.error('Erro ao carregar tendências comparativas');
        }
      } catch (e) {
        console.error('Erro ao mostrar notificação:', e);
      }
    });
};

/**
 * Renderizar gráfico de tendências
 */
$scope.renderizarGraficoTendencias = function() {
  console.log('Renderizando gráfico de tendências');
  const ctx = document.getElementById('graficoTendencias');
  if (!ctx) {
    console.error('Elemento graficoTendencias não encontrado no DOM');
    return;
  }
  
  try {
    // Verificar se o gráfico já existe e se tem o método destroy
    if (window.graficoTendencias && typeof window.graficoTendencias.destroy === 'function') {
      window.graficoTendencias.destroy();
    }
    
    // Preparar dados para o gráfico
    const dados = $scope.dashboard.tendencias.dados || [];
    const labels = dados.map(d => d.mes) || [];
    const receitas = dados.map(d => d.receitas) || [];
    const despesas = dados.map(d => d.despesas) || [];
    const saldos = dados.map(d => d.saldo) || [];
    
    console.log('Dados para o gráfico de tendências:', {
      labels: labels,
      receitas: receitas,
      despesas: despesas,
      saldos: saldos
    });
    
    // Criar gráfico de linhas para tendências
    window.graficoTendencias = new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [
          {
            label: 'Receitas',
            data: receitas,
            borderColor: 'rgba(75, 192, 192, 1)',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            tension: 0.3,
            fill: false
          },
          {
            label: 'Despesas',
            data: despesas,
            borderColor: 'rgba(255, 99, 132, 1)',
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            tension: 0.3,
            fill: false
          },
          {
            label: 'Saldo',
            data: saldos,
            borderColor: 'rgba(54, 162, 235, 1)',
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            tension: 0.3,
            fill: false
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true
          }
        },
        plugins: {
          legend: {
            position: 'bottom'
          }
        }
      }
    });
    console.log('Gráfico de tendências renderizado com sucesso');
  } catch (error) {
    console.error('Erro ao renderizar gráfico de tendências:', error);
  }
};

// Inicializar controller
$scope.init();
